<?php
/**
 * AttachmentDisplayBodyCarRentalItinerary
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Klarna\Checkout
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Klarna Checkout API V3
 *
 * API spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Klarna\Checkout\Model;

use \ArrayAccess;
use \Klarna\ObjectSerializer;

/**
 * AttachmentDisplayBodyCarRentalItinerary Class Doc Comment
 *
 * @category Class
 * @package  Klarna\Checkout
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class AttachmentDisplayBodyCarRentalItinerary implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'attachment_display_body_car_rental_itinerary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'rental_company' => 'string',
        'drivers_id' => 'int[]',
        'pick_up_location' => '\Klarna\Checkout\Model\AttachmentDisplayBodyAddress',
        'start_time' => '\DateTime',
        'drop_off_location' => '\Klarna\Checkout\Model\AttachmentDisplayBodyAddress',
        'end_time' => '\DateTime',
        'car_price' => 'float',
        'class' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'rental_company' => null,
        'drivers_id' => null,
        'pick_up_location' => null,
        'start_time' => 'date-time',
        'drop_off_location' => null,
        'end_time' => 'date-time',
        'car_price' => null,
        'class' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'rental_company' => 'rental_company',
        'drivers_id' => 'drivers_id',
        'pick_up_location' => 'pick_up_location',
        'start_time' => 'start_time',
        'drop_off_location' => 'drop_off_location',
        'end_time' => 'end_time',
        'car_price' => 'car_price',
        'class' => 'class'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'rental_company' => 'setRentalCompany',
        'drivers_id' => 'setDriversId',
        'pick_up_location' => 'setPickUpLocation',
        'start_time' => 'setStartTime',
        'drop_off_location' => 'setDropOffLocation',
        'end_time' => 'setEndTime',
        'car_price' => 'setCarPrice',
        'class' => 'setClass'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'rental_company' => 'getRentalCompany',
        'drivers_id' => 'getDriversId',
        'pick_up_location' => 'getPickUpLocation',
        'start_time' => 'getStartTime',
        'drop_off_location' => 'getDropOffLocation',
        'end_time' => 'getEndTime',
        'car_price' => 'getCarPrice',
        'class' => 'getClass'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['rental_company'] = $data['rental_company'] ?? null;
        $this->container['drivers_id'] = $data['drivers_id'] ?? null;
        $this->container['pick_up_location'] = $data['pick_up_location'] ?? null;
        $this->container['start_time'] = $data['start_time'] ?? null;
        $this->container['drop_off_location'] = $data['drop_off_location'] ?? null;
        $this->container['end_time'] = $data['end_time'] ?? null;
        $this->container['car_price'] = $data['car_price'] ?? null;
        $this->container['class'] = $data['class'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets rental_company
     *
     * @return string|null
     */
    public function getRentalCompany()
    {
        return $this->container['rental_company'];
    }

    /**
     * Sets rental_company
     *
     * @param string|null $rental_company Name of rental company
     *
     * @return self
     */
    public function setRentalCompany($rental_company)
    {
        $this->container['rental_company'] = $rental_company;

        return $this;
    }

    /**
     * Gets drivers_id
     *
     * @return int[]|null
     */
    public function getDriversId()
    {
        return $this->container['drivers_id'];
    }

    /**
     * Sets drivers_id
     *
     * @param int[]|null $drivers_id drivers_id
     *
     * @return self
     */
    public function setDriversId($drivers_id)
    {
        $this->container['drivers_id'] = $drivers_id;

        return $this;
    }

    /**
     * Gets pick_up_location
     *
     * @return \Klarna\Checkout\Model\AttachmentDisplayBodyAddress|null
     */
    public function getPickUpLocation()
    {
        return $this->container['pick_up_location'];
    }

    /**
     * Sets pick_up_location
     *
     * @param \Klarna\Checkout\Model\AttachmentDisplayBodyAddress|null $pick_up_location pick_up_location
     *
     * @return self
     */
    public function setPickUpLocation($pick_up_location)
    {
        $this->container['pick_up_location'] = $pick_up_location;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return \DateTime|null
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param \DateTime|null $start_time ISO 8601 e.g. 2012-11-24T15:00
     *
     * @return self
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets drop_off_location
     *
     * @return \Klarna\Checkout\Model\AttachmentDisplayBodyAddress|null
     */
    public function getDropOffLocation()
    {
        return $this->container['drop_off_location'];
    }

    /**
     * Sets drop_off_location
     *
     * @param \Klarna\Checkout\Model\AttachmentDisplayBodyAddress|null $drop_off_location drop_off_location
     *
     * @return self
     */
    public function setDropOffLocation($drop_off_location)
    {
        $this->container['drop_off_location'] = $drop_off_location;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return \DateTime|null
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param \DateTime|null $end_time ISO 8601 e.g. 2012-11-24T15:00
     *
     * @return self
     */
    public function setEndTime($end_time)
    {
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets car_price
     *
     * @return float|null
     */
    public function getCarPrice()
    {
        return $this->container['car_price'];
    }

    /**
     * Sets car_price
     *
     * @param float|null $car_price Local currency
     *
     * @return self
     */
    public function setCarPrice($car_price)
    {
        $this->container['car_price'] = $car_price;

        return $this;
    }

    /**
     * Gets class
     *
     * @return string|null
     */
    public function getClass()
    {
        return $this->container['class'];
    }

    /**
     * Sets class
     *
     * @param string|null $class class
     *
     * @return self
     */
    public function setClass($class)
    {
        $this->container['class'] = $class;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


