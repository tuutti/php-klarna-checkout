<?php
/**
 * Address
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Klarna\Checkout
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Klarna Checkout API V3
 *
 * API spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Klarna\Checkout\Model;

use \ArrayAccess;
use \Klarna\ObjectSerializer;

/**
 * Address Class Doc Comment
 *
 * @category Class
 * @package  Klarna\Checkout
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Address implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'address';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'given_name' => 'string',
        'family_name' => 'string',
        'organization_name' => 'string',
        'email' => 'string',
        'title' => 'string',
        'street_address' => 'string',
        'street_address2' => 'string',
        'street_name' => 'string',
        'street_number' => 'string',
        'house_extension' => 'string',
        'postal_code' => 'string',
        'city' => 'string',
        'region' => 'string',
        'phone' => 'string',
        'country' => 'string',
        'care_of' => 'string',
        'reference' => 'string',
        'attention' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'given_name' => null,
        'family_name' => null,
        'organization_name' => null,
        'email' => null,
        'title' => null,
        'street_address' => null,
        'street_address2' => null,
        'street_name' => null,
        'street_number' => null,
        'house_extension' => null,
        'postal_code' => null,
        'city' => null,
        'region' => null,
        'phone' => null,
        'country' => null,
        'care_of' => null,
        'reference' => null,
        'attention' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'given_name' => 'given_name',
        'family_name' => 'family_name',
        'organization_name' => 'organization_name',
        'email' => 'email',
        'title' => 'title',
        'street_address' => 'street_address',
        'street_address2' => 'street_address2',
        'street_name' => 'street_name',
        'street_number' => 'street_number',
        'house_extension' => 'house_extension',
        'postal_code' => 'postal_code',
        'city' => 'city',
        'region' => 'region',
        'phone' => 'phone',
        'country' => 'country',
        'care_of' => 'care_of',
        'reference' => 'reference',
        'attention' => 'attention'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'given_name' => 'setGivenName',
        'family_name' => 'setFamilyName',
        'organization_name' => 'setOrganizationName',
        'email' => 'setEmail',
        'title' => 'setTitle',
        'street_address' => 'setStreetAddress',
        'street_address2' => 'setStreetAddress2',
        'street_name' => 'setStreetName',
        'street_number' => 'setStreetNumber',
        'house_extension' => 'setHouseExtension',
        'postal_code' => 'setPostalCode',
        'city' => 'setCity',
        'region' => 'setRegion',
        'phone' => 'setPhone',
        'country' => 'setCountry',
        'care_of' => 'setCareOf',
        'reference' => 'setReference',
        'attention' => 'setAttention'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'given_name' => 'getGivenName',
        'family_name' => 'getFamilyName',
        'organization_name' => 'getOrganizationName',
        'email' => 'getEmail',
        'title' => 'getTitle',
        'street_address' => 'getStreetAddress',
        'street_address2' => 'getStreetAddress2',
        'street_name' => 'getStreetName',
        'street_number' => 'getStreetNumber',
        'house_extension' => 'getHouseExtension',
        'postal_code' => 'getPostalCode',
        'city' => 'getCity',
        'region' => 'getRegion',
        'phone' => 'getPhone',
        'country' => 'getCountry',
        'care_of' => 'getCareOf',
        'reference' => 'getReference',
        'attention' => 'getAttention'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['given_name'] = $data['given_name'] ?? null;
        $this->container['family_name'] = $data['family_name'] ?? null;
        $this->container['organization_name'] = $data['organization_name'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
        $this->container['street_address'] = $data['street_address'] ?? null;
        $this->container['street_address2'] = $data['street_address2'] ?? null;
        $this->container['street_name'] = $data['street_name'] ?? null;
        $this->container['street_number'] = $data['street_number'] ?? null;
        $this->container['house_extension'] = $data['house_extension'] ?? null;
        $this->container['postal_code'] = $data['postal_code'] ?? null;
        $this->container['city'] = $data['city'] ?? null;
        $this->container['region'] = $data['region'] ?? null;
        $this->container['phone'] = $data['phone'] ?? null;
        $this->container['country'] = $data['country'] ?? null;
        $this->container['care_of'] = $data['care_of'] ?? null;
        $this->container['reference'] = $data['reference'] ?? null;
        $this->container['attention'] = $data['attention'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets given_name
     *
     * @return string|null
     */
    public function getGivenName()
    {
        return $this->container['given_name'];
    }

    /**
     * Sets given_name
     *
     * @param string|null $given_name Given name.
     *
     * @return self
     */
    public function setGivenName($given_name)
    {
        $this->container['given_name'] = $given_name;

        return $this;
    }

    /**
     * Gets family_name
     *
     * @return string|null
     */
    public function getFamilyName()
    {
        return $this->container['family_name'];
    }

    /**
     * Sets family_name
     *
     * @param string|null $family_name Family name.
     *
     * @return self
     */
    public function setFamilyName($family_name)
    {
        $this->container['family_name'] = $family_name;

        return $this;
    }

    /**
     * Gets organization_name
     *
     * @return string|null
     */
    public function getOrganizationName()
    {
        return $this->container['organization_name'];
    }

    /**
     * Sets organization_name
     *
     * @param string|null $organization_name organization_name
     *
     * @return self
     */
    public function setOrganizationName($organization_name)
    {
        $this->container['organization_name'] = $organization_name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email E-mail address.
     *
     * @return self
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title Title.<p>Valid values for UK:</p><ul><li><em>Mr</em></li><li><em>Ms</em></li><li><em>Mrs</em></li><li><em>Miss</em></li></ul><p>Valid values for DACH:</p><ul><li><em>Herr</em></li><li><em>Frau</em></li></ul><p>Valid values for NL:</p><ul><li><em>Dhr.</em></li><li><em>Mevr.</em></li></ul>
     *
     * @return self
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets street_address
     *
     * @return string|null
     */
    public function getStreetAddress()
    {
        return $this->container['street_address'];
    }

    /**
     * Sets street_address
     *
     * @param string|null $street_address Street address, first line.
     *
     * @return self
     */
    public function setStreetAddress($street_address)
    {
        $this->container['street_address'] = $street_address;

        return $this;
    }

    /**
     * Gets street_address2
     *
     * @return string|null
     */
    public function getStreetAddress2()
    {
        return $this->container['street_address2'];
    }

    /**
     * Sets street_address2
     *
     * @param string|null $street_address2 Street address, second line.
     *
     * @return self
     */
    public function setStreetAddress2($street_address2)
    {
        $this->container['street_address2'] = $street_address2;

        return $this;
    }

    /**
     * Gets street_name
     *
     * @return string|null
     */
    public function getStreetName()
    {
        return $this->container['street_name'];
    }

    /**
     * Sets street_name
     *
     * @param string|null $street_name Street name. Only applicable in DE/AT/NL. Do not combine with street_address. See <b>streetNumber</b>.
     *
     * @return self
     */
    public function setStreetName($street_name)
    {
        $this->container['street_name'] = $street_name;

        return $this;
    }

    /**
     * Gets street_number
     *
     * @return string|null
     */
    public function getStreetNumber()
    {
        return $this->container['street_number'];
    }

    /**
     * Sets street_number
     *
     * @param string|null $street_number Street number. Only applicable in DE/AT/NL. Do not combine with street_address. See <b>streetName</b>.
     *
     * @return self
     */
    public function setStreetNumber($street_number)
    {
        $this->container['street_number'] = $street_number;

        return $this;
    }

    /**
     * Gets house_extension
     *
     * @return string|null
     */
    public function getHouseExtension()
    {
        return $this->container['house_extension'];
    }

    /**
     * Sets house_extension
     *
     * @param string|null $house_extension House extension. Only applicable in NL
     *
     * @return self
     */
    public function setHouseExtension($house_extension)
    {
        $this->container['house_extension'] = $house_extension;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string|null $postal_code Postal/post code.
     *
     * @return self
     */
    public function setPostalCode($postal_code)
    {
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city City.
     *
     * @return self
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string|null
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string|null $region State or Region.
     *
     * @return self
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone Phone number.
     *
     * @return self
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country ISO 3166 alpha-2. Country.
     *
     * @return self
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets care_of
     *
     * @return string|null
     */
    public function getCareOf()
    {
        return $this->container['care_of'];
    }

    /**
     * Sets care_of
     *
     * @param string|null $care_of Care of.
     *
     * @return self
     */
    public function setCareOf($care_of)
    {
        $this->container['care_of'] = $care_of;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference reference
     *
     * @return self
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets attention
     *
     * @return string|null
     */
    public function getAttention()
    {
        return $this->container['attention'];
    }

    /**
     * Sets attention
     *
     * @param string|null $attention attention
     *
     * @return self
     */
    public function setAttention($attention)
    {
        $this->container['attention'] = $attention;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


